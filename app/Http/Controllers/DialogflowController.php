<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Google\Cloud\Dialogflow\V2\QueryInput;
use Google\Cloud\Dialogflow\V2\TextInput;
use Google\Cloud\Dialogflow\V2\DetectIntentRequest;
use Google\Cloud\Dialogflow\V2\Client\SessionsClient;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class DialogflowController extends Controller
{
    public function detectIntent(Request $request)
    {
        try {
            $projectId = 'chatbotlaravel';
            $text = $request->input('message');
            $sessionId = $request->input('session_id', session()->getId());

            // ƒê∆∞·ªùng d·∫´n credentials
            $credentialsPath = storage_path('app/dialogflow/chatbotlaravel-f149074225c4.json');
            if (!file_exists($credentialsPath)) {
                return response()->json(['message' => 'L·ªói: File credentials kh√¥ng t·ªìn t·∫°i'], 500);
            }

            // K·∫øt n·ªëi v·ªõi Dialogflow
            $sessionClient = new SessionsClient(['credentials' => $credentialsPath]);
            $session = $sessionClient->sessionName($projectId, $sessionId);

            // T·∫°o truy v·∫•n
            $textInput = new TextInput();
            $textInput->setText($text);
            $textInput->setLanguageCode('vi');

            $queryInput = new QueryInput();
            $queryInput->setText($textInput);

            $detectIntentRequest = new DetectIntentRequest();
            $detectIntentRequest->setSession($session);
            $detectIntentRequest->setQueryInput($queryInput);

            // G·ª≠i y√™u c·∫ßu v√† nh·∫≠n ph·∫£n h·ªìi
            $response = $sessionClient->detectIntent($detectIntentRequest);
            $queryResult = $response->getQueryResult();
            $intent = $queryResult->getIntent()->getDisplayName();
            $parameters = json_decode($queryResult->getParameters()->serializeToJsonString(), true);

            // Ghi log intent v√† parameters ƒë·ªÉ debug
            Log::info("üìå Intent x√°c ƒë·ªãnh: " . $intent);
            Log::info("üìå Tham s·ªë nh·∫≠n ƒë∆∞·ª£c:", $parameters);

            // X·ª≠ l√Ω intent
            $replyMessage = $this->handleIntent($intent, $parameters);

            // ƒê√≥ng session
            $sessionClient->close();

            return response()->json(['message' => $replyMessage]);
        } catch (\Exception $e) {
            Log::error("‚ùå L·ªói chatbot: " . $e->getMessage());
            return response()->json(['message' => 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!'], 500);
        }
    }

    private function handleIntent($intent, $parameters)
    {
        switch ($intent) {
            case "aboutWeb":
                return "Shop chuy√™n b√°n qu·∫ßn √°o nam n·ªØ: √°o, qu·∫ßn, v√°y, ph·ª• ki·ªán. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m n√†o?";

            case "iProducts":
                Log::info("‚úÖ Intent `iProducts` ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.");
                return $this->searchProduct($parameters);

            default:
                Log::warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Intent ph√π h·ª£p.");
                return "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?";
        }
    }

    private function searchProduct($parameters)
    {
        $category = $parameters['product_category'] ?? null;
        $material = $parameters['material'] ?? null;
        $style = $parameters['style'] ?? null;
        $color = $parameters['color'] ?? null;

        Log::info("üîç T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi c√°c tham s·ªë:", [
            'category' => $category,
            'material' => $material,
            'style' => $style,
            'color' => $color
        ]);

        // Truy v·∫•n s·∫£n ph·∫©m t·ª´ DB
        $query = DB::table('products')
            ->leftJoin('discounts', 'products.discount_id', '=', 'discounts.id')
            ->select('product_name', 'price', 'image', 'slug', 'discount_id', 'percent_discount');

        if (!empty($category)) {
            $query->where('category_id', function ($subquery) use ($category) {
                $subquery->select('id')
                    ->from('categories')
                    ->where('name', $category)
                    ->limit(1);
            });
        }

        if (!empty($material)) $query->where('material', $material);
        if (!empty($style)) $query->where('style', $style);
        if (!empty($color)) $query->where('color', $color);

        $products = $query->take(5)->get();

        if ($products->isNotEmpty()) {
            return $products->map(function ($product) {
                $price = $product->discount_id ?
                    $product->price - ($product->price * $product->percent_discount)
                    : $product->price;

                return "<a href='" . url('product/' . $product->slug) . "'
                        style='display: flex; align-items: center; gap: 10px; padding: 5px; text-decoration: none; color: #333;'>
                        <img src='uploads/{$product->image}' width='50' height='50' style='border-radius: 5px;'>
                        <span>{$product->product_name} (" . number_format($price, 0, ',', '.') . " ƒë)</span>
                    </a>";
            })->implode("\n");
        } else {
            Log::warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.");
            return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a kh√°c kh√¥ng?";
        }
    }
}
