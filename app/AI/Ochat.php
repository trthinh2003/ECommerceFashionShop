<?php

namespace App\AI;

use App\Models\Product;
use App\Models\ProductVariant;
use Cloudstudio\Ollama\Facades\Ollama;
use Exception;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class Ochat
{

    public function send(string $message)
    {
        try {
            $sessionKey = 'chatbot_context';
            $context = session($sessionKey, []);
            $message = mb_strtolower(trim($message));

            $handlers = [
                'handleGreeting' => [$message, $sessionKey],
                'handleExit' => [$message, $sessionKey],
                'handleProductSuggestion' => [$message, $sessionKey],
                'handleProductQuery' => [$message, $sessionKey],
                'handleProductColor' => [$message, $sessionKey],
                'handleProductDiscount' => [$message, $sessionKey],
            ];

            foreach ($handlers as $method => $params) {
                if ($response = $this->$method(...$params)) return $response;
            }

            if (!empty($context)) {
                return $this->handleProductSelection($context, $message, $sessionKey);
            }

            return $this->callOllama($message);
        } catch (Exception $e) {
            Log::error("Chatbot Error: " . $e->getMessage());
            return "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i!";
        }
    }

    /*==============================
    ********Handler Function********
    ==============================*/
    private function handleGreeting($message, $sessionKey)
    {
        if (preg_match('/\b(ch√†o|xin ch√†o|hi|hello|ch√†o b·∫°n)\b/i', $message)) {
            session()->forget($sessionKey);
            return "Xin ch√†o! C·ª≠a h√†ng TST Fashion Shop c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? üòä";
        }
        return null;
    }

    private function handleExit($message, $sessionKey)
    {
        if (preg_match('/\b(kh√¥ng mua|tho√°t|h·ªßy|bye|t·∫°m bi·ªát|ko mua)\b/i', $message)) {
            session()->forget($sessionKey);
            return "C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm TST Fashion Shop! N·∫øu c·∫ßn t∆∞ v·∫•n th√™m, h√£y nh·∫Øn tin nh√©! üòä";
        }
        return null;
    }

    private function handleProductSuggestion($message)
    {
        if (preg_match('/\b(g·ª£i √Ω v√†i s·∫£n ph·∫©m|s·∫£n ph·∫©m n·ªïi b·∫≠t|c√≥ g√¨ hot|v√†i c√°i s·∫£n ph·∫©m ƒëi|g·ª£i √Ω|ƒë·ªÅ xu·∫•t)\b/i', $message)) {
            return $this->getProductList();
        }
        return null;
    }

    private function handleProductQuery($message, $sessionKey)
    {
        $categories = [
            // '√°o' => '√°o',
            '√°o thun' => '√°o thun',
            '√°o thu' => '√°o thu',
            't-shirt' => '√°o thun',
            '√°o s∆° mi' => '√°o s∆° mi',
            '√°o hoodie' => '√°o hoodie',
            // 'qu·∫ßn' => 'qu·∫ßn',
            'qu·∫ßn jean' => 'qu·∫ßn jean',
            'qu·∫ßn hoodie' => 'qu·∫ßn hoodie',
            'gi√†y' => 'gi√†y',
            'sneaker' => 'gi√†y',
            'm≈©' => 'm≈©',
            'hoodie' => 'hoodie',
            'v√°y' => 'v√°y',
            'ph·ª• ki·ªán' => 'ph·ª• ki·ªán'
        ];

        foreach ($categories as $keyword => $category) {
            if (stripos($message, $keyword) !== false) {
                Log::info("ƒê√£ nh·∫≠n di·ªán lo·∫°i s·∫£n ph·∫©m: " . $category);
                return $this->queryProductsByType($category, $sessionKey);
            }
        }
        return null;
    }

    private function handleProductColor($message, $sessionKey)
    {
        $colors = [
            'ƒëen' => 'ƒëen',
            'tr·∫Øng' => 'tr·∫Øng',
            'xanh' => 'xanh',
            'ƒë·ªè' => 'ƒë·ªè',
            'v√†ng' => 'v√†ng',
            't√≠m' => 't√≠m',
            'h·ªìng' => 'h·ªìng',
            'x√°m' => 'x√°m',
            'n√¢u' => 'n√¢u'
        ];
        foreach ($colors as $keyword => $color) {
            if (stripos($message, $keyword) !== false) {
                Log::info("ƒê√£ nh·∫≠n di·ªán m√†u s·∫£n ph·∫©m: " . $color);
                return $this->queryProductsByType($color, $sessionKey);
            }
        }
        return null;
    }

    private function handleProductDiscount($message, $sessionKey){
        if (preg_match('/\b(khuy·∫øn m√£i|sale|gi·∫£m gi√°|khuyen mai|giam gia|ch∆∞∆°ng tr√¨nh)\b/i', $message)) {
            return $this->getProductDiscountList();
        }
    }

    private function handleConversation($context, $message, $sessionKey)
    {
        if ($context['step'] === 'awaiting_color') {
            $validColors = ['ƒëen', 'tr·∫Øng', 'xanh', 'ƒë·ªè', 'v√†ng', 't√≠m', 'h·ªìng', 'x√°m', 'n√¢u'];
            if (in_array($message, $validColors)) {
                $context['color'] = $message;
                $context['step'] = 'checking_stock';
                session([$sessionKey => $context]);

                return "B·∫°n mu·ªën ch·ªçn m√†u $message ƒë√∫ng kh√¥ng? H√£y ƒë·ªÉ m√¨nh ki·ªÉm tra kho h√†ng nh√©!";
            }
            return "M√¨nh ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c m√†u n√†y. B·∫°n c√≥ th·ªÉ ch·ªçn m√†u nh∆∞: " . implode(', ', $validColors) . " kh√¥ng?";
        }
    }

    private function handleProductSelection($context, $message, $sessionKey) {
        if (preg_match('/m·∫´u s·ªë (\d+)/i', $message, $matches)) {
            $index = (int)$matches[2] - 1; // Tr·ª´ 1 ƒë·ªÉ kh·ªõp index trong m·∫£ng
            $products = session($sessionKey . '_products', []);

            if (isset($products[$index])) {
                $product = $products[$index];

                // Truy v·∫•n chi ti·∫øt s·∫£n ph·∫©m t·ª´ database
                $productDetail = DB::table('products')
                    ->join('product_variants', 'products.id', '=', 'product_variants.product_id')
                    ->join('categories', 'products.category_id', '=', 'categories.id')
                    ->select('products.*', 'product_variants.color', 'categories.category_name', 'product_variants.size', 'product_variants.stock')
                    ->where('products.id', $product->id)
                    ->first();

                if ($productDetail) {
                    return $this->formatProductResponse([$productDetail], "üí° Th√¥ng tin chi ti·∫øt v·ªÅ m·∫´u s·ªë " . ($index + 1) . ":");
                }
            }

            return "M·∫´u s·ªë n√†y kh√¥ng t·ªìn t·∫°i. B·∫°n c√≥ th·ªÉ ki·ªÉm tra l·∫°i danh s√°ch m·∫´u kh√¥ng?";
        }

        return null;
    }




    /*==================================
    ********End Handler Function********
    ===================================*/


    private function queryProductsByType($category, $sessionKey) {
        $products = $this->fetchProducts(['category' => $category], 5);
        if ($products->isNotEmpty()) {
            // L∆∞u danh s√°ch s·∫£n ph·∫©m v√†o session ƒë·ªÉ truy v·∫•n l·∫°i khi c·∫ßn
            session([$sessionKey . '_products' => $products]);

            return $this->formatProductResponse($products, "üîπ ƒê√¢y l√† m·ªôt s·ªë m·∫´u $category ·ªü b√™n m√¨nh:");
        }
        return "Hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ $category trong kho. B·∫°n c√≥ mu·ªën t√¨m s·∫£n ph·∫©m kh√°c kh√¥ng?";
    }


    private function fetchProducts(array $filters, int $limit = 5)
    {
        try {
            $query = DB::table('products')
                ->join('product_variants', 'products.id', '=', 'product_variants.product_id')
                ->join('categories', 'products.category_id', '=', 'categories.id')
                ->select('products.*', 'product_variants.color', 'categories.category_name', 'product_variants.size', 'product_variants.stock')
                ->where('product_variants.stock', '>', 0);

            if (!empty($filters['category'])) {
                Log::info("Truy v·∫•n s·∫£n ph·∫©m thu·ªôc danh m·ª•c: " . $filters['category']);
                Log::info("Truy v·∫•n SQL: " . $query->toSql());
                Log::info("Tham s·ªë: ", $query->getBindings());
                $query->where('products.product_name', 'LIKE', "%{$filters['category']}%");
            }

            return $query->limit($limit)->get() ?? collect();
        } catch (Exception $e) {
            Log::error("L·ªói truy v·∫•n s·∫£n ph·∫©m: " . $e->getMessage());
            return collect();
        }
    }

    private function getProductList()
    {
        $products = $this->fetchProducts([], 10);
        if ($products->isNotEmpty()) {
            return $this->formatProductResponse($products, "üåü M·ªôt s·ªë s·∫£n ph·∫©m n·ªïi b·∫≠t m√¨nh t√¨m th·∫•y:");
        }
        return "Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o n·ªïi b·∫≠t. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m c·ª• th·ªÉ n√†o kh√¥ng?";
    }

    private function formatProductResponse($products, $title)
    {
        $response = "$title<br><br>";

        // CSS cho hi·ªáu ·ª©ng hover
        $response .= "<style>
            a:hover {
                color: #ccc; /* M√†u ch·ªØ khi hover */
                text-decoration: underline; /* G·∫°ch ch√¢n khi hover */
                transition: all 0.3s ease; /* Hi·ªáu ·ª©ng m∆∞·ª£t */
            }
        </style>";

        foreach ($products as $product) {
            if ($product->stock > 0) {
                $response .= "üõçÔ∏è <a class=\"text-dark\" href=\"" . route('sites.productDetail', ['slug' => $product->slug]) . "\"><b>{$product->product_name}</b>({$product->color}, {$product->size})<br>";
                if(!empty($product->discount_id)){
                    $response .= "Khuy·∫øn m√£i: <span class=\"text-white badge badge-success\">" . $product->discount . " </span></br>";
                }
                $response .= "üí∞ Gi√°: <b>" . number_format($product->price) . " ƒë</b><br>";
                if (!empty($product->image)) {
                    $response .= "<img src='" . asset("uploads/{$product->image}") . "' alt='{$product->product_name}' style='max-width: 100px;'/></a> <br>";
                }
                $response .= "üì¶ S·ªë l∆∞·ª£ng c√≤n: " . ($product->stock > 0 ? "{$product->stock} s·∫£n ph·∫©m" : "H·∫øt h√†ng") . "<br><br>";
            }
        }
        return $response;
    }


    private function getProductDiscountList(){
        $products = $this->fetchProductsDiscount(10);
        if ($products->isNotEmpty()) {
            return $this->formatProductResponse($products, "üåü M·ªôt s·ªë s·∫£n ph·∫©m ƒëang khuy·∫øn m√£i m√† m√¨nh t√¨m th·∫•y:");
        }
        return "Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m khuy·∫øn m√£i n√†o. B·∫°n c√≥ mu·ªën xem m·ªôt s·ªë m·∫´u s·∫£n ph·∫©m n√†o kh√¥ng?";
    }

    private function fetchProductsDiscount($limit)
    {
        try {
            $query = DB::table('products')
                ->join('product_variants', 'products.id', '=', 'product_variants.product_id')
                ->join('categories', 'products.category_id', '=', 'categories.id')
                ->join('discounts', 'products.discount_id', '=', 'discounts.id')
                ->select('products.*','discounts.name as discount', 'product_variants.color', 'categories.category_name', 'product_variants.size', 'product_variants.stock');
            return $query->limit($limit)->get() ?? collect();
        } catch (Exception $e) {
            Log::error("L·ªói truy v·∫•n s·∫£n ph·∫©m: " . $e->getMessage());
            return collect();
        }
    }



    private function callOllama($message)
    {

        $allColors = join(',', ProductVariant::distinct('color')->pluck('color')->toArray());
        return Ollama::model('llama3.2')
            ->prompt("
                B·∫°n l√† m·ªôt tr·ª£ l√Ω chatbot th√¥ng minh, b·∫°n ƒëang ƒë√≥ng vai chatbot cho website b√°n h√†ng cho TST Fashion Shop - m·ªôt c·ª≠a h√†ng b√°n qu·∫ßn √°o online t·∫°i Vi·ªát Nam.
                - N·∫øu kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m, tr∆∞·ªõc ti√™n ki·ªÉm tra trong database.
                - N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m, h√£y ƒë·ªÅ xu·∫•t m·ªôt s·ªë m·∫∑t h√†ng c√≥ s·∫µn (Ch·ªâ ƒë·ªÅ xu·∫•t √°o ho·∫∑c qu·∫ßn, ph·ª• ki·ªán th√¥i).
                - N·∫øu kh√°ch h·ªèi ngo√†i ph·∫°m vi, h√£y tr·∫£ l·ªùi l·ªãch s·ª± v√† khuy·∫øn kh√≠ch h·ªç mua s·∫Øm.
                - Kh√¥ng ƒë∆∞a th√¥ng tin ngo√†i v·ªÅ c·ª≠a h√†ng.
                - N·∫øu c√≥ ai ƒë√≥ khen b·∫°n, kh√¥ng ng·∫ßn ng·∫°i c·∫£m ∆°n h·ªç v√† t·ªè ra th√¢n thi·ªán.
                - N·∫øu c√≥ ai ƒë√≥ ch·ª≠i b·∫°n, h√£y nh·∫Øc nh·ªü v√† t·ªè ra l·ªãch s·ª± v·ªõi h·ªç.
                - N·∫øu ai ƒë√≥ c√≥ nh·ªØng tin nh·∫Øn v·ªõi t·ª´ ng·ªØ nh·∫°y c·∫£m ho·∫∑c kh√¥ng ph√π h·ª£p h√£y c·∫£nh b√°o h·ªç m·ªôt c√°ch nh·∫π nh√†ng v√† l·ªãch s·ª±.
                - Ch√≠nh s√°ch ƒë·ªïi tr·∫£ c·ªßa c·ª≠a h√†ng l√† 30 ng√†y.
                - C√°c ph∆∞∆°ng th·ª©c thanh to√°n c√≥ ·ªü c·ª≠a h√†ng l√† COD, v√≠ ƒëi·ªán t·ª≠ (VNPay, Momo, ZaloPay).
                - Size √°o v√† qu·∫ßn th√¨ c√≥ l√† XS, S, M, L, XL, XXL.
                - C√°c m√†u c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i trong c·ª≠a h√†ng l√† '$allColors'.
                - K√Ω t·ª± '2' ƒë∆°n l·∫ª ƒë∆∞·ª£c xem l√† ch√†o nh√©.
                - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°ch li√™n h·ªá ƒë·ªïi tr·∫£ s·∫£n ph·∫©m, h√£y n√≥i v·ªÅ ch√≠nh s√°ch ƒë·ªïi tr·∫£ c·ªßa c·ª≠a h√†ng v√† c√≥ ƒë∆∞·ªùng link qua trang li√™n h·ªá.
                - Trang li√™n h·ªá n·∫±m ·ªü ƒë√¢y: <a href='http://127.0.0.1:8000/contact'>Contacts</a>
                - Trang blog n·∫±m ·ªü ƒë√¢y: <a href='http://127.0.0.1:8000/blog'>Blog</a>
                - Trang mua s·∫£n ph·∫©m n·∫±m ·ªü ƒë√¢y: <a href='http://127.0.0.1:8000/shop'>Shop</a>
                Ng∆∞·ªùi d√πng h·ªèi: '$message'.
            ")
            ->options(['temperature' => 0.7])
            ->stream(false)
            ->ask()['response'] ?? "M√¨nh ch∆∞a hi·ªÉu l·∫Øm, b·∫°n c√≥ th·ªÉ cung c·∫•p th√™m chi ti·∫øt kh√¥ng? üòä";
    }
}
